package katas.kyu4;

import java.util.Arrays;

public class Assign1 {

    public static int[] snail(int[][] array) {
        if (array[0].length == 0) return new int[0];
        if (array.length == 1) return new int[]{ array[0][0] };

        int[] res = new int[array.length * array.length];
        int index = 0, size = array.length, k = 0, l = array.length-1;

        while (size > 0) {
            if (size == 1) {
                res[index++] = array[k][k];
            } else {
                for (int i = k ; i < l ; i++) res[index++] = array[k][i];
                for (int i = k ; i < l ; i++) res[index++] = array[i][l];
                for (int i = l ; i > k ; i--) res[index++] = array[l][i];
                for (int i = l ; i > k ; i--) res[index++] = array[i][k];
            }
            size -= 2;
            k++;
            l--;
        }

        return res;
    }


    public static void main(String[] args) {
        test(new int[][]{{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}, new int[]{1, 2, 3, 6, 9, 8, 7, 4, 5});
        test(new int[][]{{1, 2, 3, 9}, {4, 5, 6, 4}, {7, 8, 9, 1}, {1, 2, 3, 4}}, new int[]{1, 2, 3, 9, 4, 1, 4, 3, 2, 1, 7, 4, 5, 6, 9, 8});

        test(new int[][]{{826, 49, 126, 209, 55, 479, 432, 120, 542, 48, 732, 498, 943, 995, 875, 407},
                        {48, 98, 533, 784, 534, 676, 758, 25, 441, 508, 661, 480, 803, 474, 81, 238},
                        {499, 5, 94, 98, 370, 569, 490, 215, 267, 25, 402, 993, 265, 172, 901, 478},
                        {964, 287, 999, 222, 821, 931, 937, 328, 536, 18, 278, 197, 247, 685, 575, 557},
                        {394, 67, 858, 951, 473, 989, 867, 280, 300, 92, 584, 462, 628, 552, 314, 392},
                        {682, 916, 117, 328, 763, 874, 338, 374, 644, 529, 167, 189, 718, 375, 796, 379},
                        {596, 554, 161, 372, 974, 952, 885, 681, 285, 868, 568, 668, 802, 893, 719, 100},
                        {245, 843, 608, 645, 43, 937, 545, 858, 374, 765, 519, 821, 95, 846, 42, 316},
                        {254, 362, 465, 487, 4, 919, 886, 711, 697, 466, 466, 734, 268, 924, 220, 11},
                        {311, 224, 750, 676, 481, 223, 124, 572, 436, 624, 941, 175, 586, 740, 544, 675},
                        {638, 333, 209, 373, 274, 284, 981, 703, 285, 226, 552, 409, 105, 392, 499, 155},
                        {313, 23, 359, 409, 407, 274, 280, 20, 181, 436, 641, 661, 489, 261, 609, 182},
                        {578, 219, 746, 575, 471, 121, 532, 438, 485, 152, 630, 277, 699, 64, 697, 869},
                        {690, 556, 964, 308, 883, 588, 483, 622, 152, 455, 166, 83, 346, 70, 750, 965},
                        {695, 422, 600, 567, 198, 678, 828, 928, 22, 760, 337, 298, 784, 547, 855, 279},
                        {730, 139, 603, 611, 676, 262, 50, 279, 615, 59, 649, 172, 36, 416, 242, 763}},
                new int[]{826, 49, 126, 209, 55, 479, 432, 120, 542, 48, 732, 498, 943, 995, 875,
                        407, 238, 478, 557, 392, 379, 100, 316, 11, 675, 155, 182, 869, 965, 279,
                        763, 242, 416, 36, 172, 649, 59, 615, 279, 50, 262, 676, 611, 603, 139,
                        730, 695, 690, 578, 313, 638, 311, 254, 245, 596, 682, 394, 964, 499, 48,
                        98, 533, 784, 534, 676, 758, 25, 441, 508, 661, 480, 803, 474, 81, 901, 575,
                        314, 796, 719, 42, 220, 544, 499, 609, 697, 750, 855, 547, 784, 298, 337, 760,
                        22, 928, 828, 678, 198, 567, 600, 422, 556, 219, 23, 333, 224, 362, 843, 554,
                        916, 67, 287, 5, 94, 98, 370, 569, 490, 215, 267, 25, 402, 993, 265, 172, 685,
                        552, 375, 893, 846, 924, 740, 392, 261, 64, 70, 346, 83, 166, 455, 152, 622, 483,
                        588, 883, 308, 964, 746, 359, 209, 750, 465, 608, 161, 117, 858, 999, 222, 821,
                        931, 937, 328, 536, 18, 278, 197, 247, 628, 718, 802, 95, 268, 586, 105, 489, 699, 277,
                        630, 152, 485, 438, 532, 121, 471, 575, 409, 373, 676, 487, 645, 372, 328, 951, 473,
                        989, 867, 280, 300, 92, 584, 462, 189, 668, 821, 734, 175, 409, 661, 641, 436, 181, 20,
                        280, 274, 407, 274, 481, 4, 43, 974, 763, 874, 338, 374, 644, 529, 167, 568, 519, 466, 941,
                        552, 226, 285, 703, 981, 284, 223, 919, 937, 952, 885, 681, 285, 868, 765, 466, 624, 436, 572,
                        124, 886, 545, 858, 374, 697, 711});
    }

    private static void test(int[][] array, int[] r) {

        System.out.println(Arrays.toString(snail(array)));
        System.out.println(Arrays.toString(r));
        System.out.println();
    }



}
